name: Build Xpress9 Python Package

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel cython build

      # Special handling for macOS universal2 build
      - name: Build universal2 wheel for macOS
        if: matrix.os == 'macos-latest'
        run: |
          export ARCHFLAGS="-arch x86_64 -arch arm64"
          export MACOSX_DEPLOYMENT_TARGET="11.0"
          python -m build --wheel
        env:
          CIBW_ARCHS_MACOS: "universal2"
          MACOSX_DEPLOYMENT_TARGET: "11.0"

      # Build for Windows and Linux
      - name: Build wheel for Windows/Linux
        if: matrix.os != 'macos-latest'
        run: |
          python -m build --wheel

      - name: Store built wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  # Test the wheels
  test_wheels:
    needs: build_wheels
    name: Test wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist

      - name: Install wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install --find-links dist xpress9

      - name: Test import
        run: |
          python -c "from xpress9 import Xpress9; x = Xpress9(); x.initialize()"

  # Build source distribution
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel cython build

      - name: Build sdist
        run: python -m build --sdist

      - name: Store sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz

  # Deploy to PyPI when creating a release
  deploy:
    if: github.event_name == 'release'
    needs: [build_wheels, test_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten directory structure
        run: |
          mkdir -p flat_dist
          find dist -type f -name "*.whl" -o -name "*.tar.gz" | xargs -I {} cp {} flat_dist/
          rm -rf dist
          mv flat_dist dist

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install twine

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m twine upload --skip-existing dist/*
